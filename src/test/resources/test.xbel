/* 
configuration section containing
    - definition of output format (XES and potentially CSV)
    - for XES the global, extension, classifier elements
    - for CSV the delimiter (that is a todo)
    - the exception handling (print, ignore, determine)
*/
CONFIGURATION {
    EXPORT TO XES {
        XESExtension("name", "prefix", "uri", "pid0", "pid1");
        XESGlobal("name", "type", "value", "scope");
        XESClassifier("name", "keys", "scope", "pid0");
    }
    EXCEPTION HANDLING (PRINT);
}




/*
global variables section
    - variables to e.g., store the smart contract addresses that are queried
    - variables contain no 
    - no limit to the imagination here :)
*/
address[] augurAddresses = {0x1780};



/*
scope section containing
    - scopes following the basic structure 
        BLOCKS* { 
            TRANSACTIONS* { 
                LOG ENTRY {
                    SCRIPT
                }
            } 
            SMART CONTRACTS {
                LOG ENTRY {
                    SCRIPT
                }
            }             
        }
*/
BLOCKS (5000000,PENDING) {
    SCRIPT {
        address ident:pid = "network process"; 
	    address ident:piid = "block creation";
		string ident:eid = block.number; 
		uint256 time:timestamp = block.timestamp;
        EMIT {
            EVENT (ident:pid, ident:piid, ident:eid, timestamp AS XDATE time:timestamp);
        }
    }

    TRANSACTIONS (ANY) (ANY) {
        SCRIPT {
            EMIT {
                EVENT ("network process" AS ident:pid, block.number AS ident:piid, transaction.number AS ident:eid, transaction.value AS price);
            }
        }        
    }

    SMART CONTRACTS(augurAddresses) {
        LOG ENTRY (AugurUpdated(address indexed newAddress)) {
            SCRIPT {                
                replaceExistingValues(augurAddresses,newAddress);
            }
        }
    }

    SMART CONTRACTS(augurAddresses) {
        LOG ENTRY (string indexed sign, address indexed universe, _, address market, address creator, ...) {
            SCRIPT {                
                address ident:pid = universe; 
				address ident:piid = market;
				string ident:eid = "Created";
				uint256 reputation = stateQuery(0xe99, getReputation, creator);
                EMIT IF (isEven(block.number) AND sign == 0xe63e61) {
                    EVENT(ident:pid, ident:piid, ident:eid, activityName);
				    TRACE(ident:pid, ident:piid, creator, reputation);
                }
            }
        }
    }
}